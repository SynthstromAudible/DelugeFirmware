import os

Import("env")
Import("log_parent")
Import("cproject")
Import("e2_build_targets")
Import("dbt_build_targets")

# Prep the return variable
success = False

# Beep boop, human lifeform detected.
log = log_parent.getChild("e2_xml")
log.info("Detected e2_xml mode.")


if env["BUILD_LABEL"] not in dbt_build_targets:
    print(
        'Error: "{}" is not a valid target in the e2_xml config.\n'.format(
            env["BUILD_LABEL"]
        )
    )
    print("       Valid targets include:")
    for bt in dbt_build_targets:
        print("           {}".format(bt))
    print("")
    Return("success")

# And with all that out of the way, we start up our
# main/construction environment and configure the particulars
# for e2_xml targeting all within the "if" block.
build_label = env["BUILD_LABEL"]

# Some shorthand for all the labels and directories we're
# going to need below.
dbt_target_index = dbt_build_targets.index(build_label)
e2_target = e2_build_targets[dbt_target_index]
build_dir = env["BUILD_DIR"]
source_dir = "src"
build_src_dir = os.path.join(build_dir, source_dir)
build_segs = build_label.split("-")
firmware_filename = cproject.get_target_filename(e2_target)

# Build construction environment for selected or default e2 target
env.Replace(**cproject.get_toolchain_tools(e2_target))

# "Deluge-<build_type>-<model>" for the current e2 target
env["FIRMWARE_FILENAME"] = firmware_filename

# log.debug([i for i, v in dict(env).items() if v])
env["CCFLAGS"] = " ".join(cproject.get_c_flags(e2_target))
env["CPPFLAGS"] = " ".join(cproject.get_cpp_flags(e2_target))

# Don't really know where this flag came from in the config, but it's in
# the e2studio makefiles.
env["CPPFLAGS"] += " -fdiagnostics-parseable-fixits"
env["ASMPATH"] = [str(p) for p in cproject.get_asm_includes(e2_target)]
env["CCPATH"] = [str(p) for p in cproject.get_c_includes(e2_target)]
env["CXXPATH"] = [str(p) for p in cproject.get_cpp_includes(e2_target)]
env["CPPPATH"] = env["ASMPATH"] + env["CCPATH"] + env["CXXPATH"]

# The assembler commandline needed a little bit of fudging for this build.
env["ASPPFLAGS"] += " -x assembler-with-cpp"
env["ASPATH"] = " {}".format(" ".join(['-I"{}"'.format(inc) for inc in env["ASMPATH"]]))
env[
    "ASPPCOM"
] = "$CC $ASPPFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -c -o $TARGET $SOURCES"
env["ASCOM"] = "$CC $CCFLAGS $ASFLAGS $ASPATH -o $TARGET -c $SOURCE"
# env["CCCOM"] = "$CC -o $TARGET -c $CFLAGS $CCFLAGS $_CCCOMCOM $SOURCES"
# env["CXXCOM"] = "$CXX -o $TARGET -c $CXXFLAGS $CCFLAGS $_CCCOMCOM $SOURCES"

# Here be preprocessor defs. Doesn't yet include new/re defines from the commandline
# but it'll be easy to add if we want, for testing.
env["CPPDEFINES"] = cproject.get_preprocessor_defs(e2_target)

# Literally just says ".elf"
env["PROGSUFFIX"] = cproject.get_target_ext(e2_target)

# Had to fudge the linker command a bit to get both the mapfile in there,
# and g++ used to perform the linking step.
env["MAPFILE"] = "{}".format(
    os.path.join(build_dir, "{}.map".format(cproject.get_target_filename(e2_target)))
)
env["LINKFLAGS"] = cproject.get_link_flags(e2_target)
env["LINKCOM"] = "$CXX $CPPFLAGS -o $TARGET $SOURCES $LINKFLAGS"

# This is questionably useful. I think it might actually be disabled in e2.
env["LIBPATH"] = [str(i) for i in cproject.get_link_libs_order(e2_target)]

success = True
# Signal true back to SConstruct
Return("success")
